{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nexport const useObserver = (ref, canLoad, isLoading, callback) => {\n  _s();\n\n  const observer = useRef();\n  useEffect(() => {\n    if (isLoading) return;\n    if (observer.current) observer.current.disconnect();\n\n    var cb = function (entries, observer) {\n      if (entries[0].isIntersecting && canLoad) {\n        callback();\n      }\n    };\n\n    observer.current = new IntersectionObserver(cb);\n    observer.current.observe(ref.current);\n  }, [isLoading]);\n};\n\n_s(useObserver, \"mvUvGhiqkPzCYiMPAW/Py9ym/ZY=\");","map":{"version":3,"names":["useEffect","useRef","useObserver","ref","canLoad","isLoading","callback","observer","current","disconnect","cb","entries","isIntersecting","IntersectionObserver","observe"],"sources":["D:/Project/task4/src/components/hooks/useObserver.js"],"sourcesContent":["import {useEffect, useRef} from \"react\";\r\n\r\n\r\nexport const useObserver = (ref, canLoad, isLoading, callback) => {\r\n    const observer = useRef()\r\n    useEffect(() => {\r\n        if (isLoading) return;\r\n        if (observer.current) observer.current.disconnect();\r\n        var cb = function(entries, observer) {\r\n            if (entries[0].isIntersecting && canLoad) {\r\n                callback()\r\n            }\r\n        };\r\n        observer.current = new IntersectionObserver(cb);\r\n        observer.current.observe(ref.current)\r\n    }, [isLoading])\r\n}"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,OAAhC;AAGA,OAAO,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAeC,SAAf,EAA0BC,QAA1B,KAAuC;EAAA;;EAC9D,MAAMC,QAAQ,GAAGN,MAAM,EAAvB;EACAD,SAAS,CAAC,MAAM;IACZ,IAAIK,SAAJ,EAAe;IACf,IAAIE,QAAQ,CAACC,OAAb,EAAsBD,QAAQ,CAACC,OAAT,CAAiBC,UAAjB;;IACtB,IAAIC,EAAE,GAAG,UAASC,OAAT,EAAkBJ,QAAlB,EAA4B;MACjC,IAAII,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,IAA6BR,OAAjC,EAA0C;QACtCE,QAAQ;MACX;IACJ,CAJD;;IAKAC,QAAQ,CAACC,OAAT,GAAmB,IAAIK,oBAAJ,CAAyBH,EAAzB,CAAnB;IACAH,QAAQ,CAACC,OAAT,CAAiBM,OAAjB,CAAyBX,GAAG,CAACK,OAA7B;EACH,CAVQ,EAUN,CAACH,SAAD,CAVM,CAAT;AAWH,CAbM;;GAAMH,W"},"metadata":{},"sourceType":"module"}