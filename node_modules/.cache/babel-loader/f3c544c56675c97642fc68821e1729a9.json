{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"D:\\\\Project\\\\task4\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"D:\\\\Project\\\\task4\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upload = upload;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _click = require(\"./click\");\n\nvar _blur = require(\"./blur\");\n\nvar _focus = require(\"./focus\");\n\nvar _utils = require(\"./utils\");\n\nfunction upload(element, fileOrFiles, init) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$applyAccept = _ref.applyAccept,\n      applyAccept = _ref$applyAccept === void 0 ? false : _ref$applyAccept;\n\n  var _input$files;\n\n  var input = (0, _utils.isElementType)(element, 'label') ? element.control : element;\n\n  if (!input || !(0, _utils.isElementType)(input, 'input', {\n    type: 'file'\n  })) {\n    throw new TypeError(\"The \".concat(input === element ? 'given' : 'associated', \" \").concat(input == null ? void 0 : input.tagName, \" element does not accept file uploads\"));\n  }\n\n  if ((0, _utils.isDisabled)(element)) return;\n  (0, _click.click)(element, init == null ? void 0 : init.clickInit);\n  var files = (Array.isArray(fileOrFiles) ? fileOrFiles : [fileOrFiles]).filter(function (file) {\n    return !applyAccept || isAcceptableFile(file, input.accept);\n  }).slice(0, input.multiple ? undefined : 1); // blur fires when the file selector pops up\n\n  (0, _blur.blur)(element); // focus fires when they make their selection\n\n  (0, _focus.focus)(element); // do not fire an input event if the file selection does not change\n\n  if (files.length === ((_input$files = input.files) == null ? void 0 : _input$files.length) && files.every(function (f, i) {\n    var _input$files2;\n\n    return f === ((_input$files2 = input.files) == null ? void 0 : _input$files2.item(i));\n  })) {\n    return;\n  } // the event fired in the browser isn't actually an \"input\" or \"change\" event\n  // but a new Event with a type set to \"input\" and \"change\"\n  // Kinda odd...\n\n\n  var inputFiles = _objectSpread({}, files, _defineProperty({\n    length: files.length,\n    item: function item(index) {\n      return files[index];\n    }\n  }, Symbol.iterator, function () {\n    var i = 0;\n    return {\n      next: function next() {\n        return {\n          done: i >= files.length,\n          value: files[i++]\n        };\n      }\n    };\n  }));\n\n  (0, _dom.fireEvent)(input, (0, _dom.createEvent)('input', input, {\n    target: {\n      files: inputFiles\n    },\n    bubbles: true,\n    cancelable: false,\n    composed: true\n  }));\n\n  _dom.fireEvent.change(input, _objectSpread({\n    target: {\n      files: inputFiles\n    }\n  }, init == null ? void 0 : init.changeInit));\n}\n\nfunction isAcceptableFile(file, accept) {\n  if (!accept) {\n    return true;\n  }\n\n  var wildcards = ['audio/*', 'image/*', 'video/*'];\n  return accept.split(',').some(function (acceptToken) {\n    if (acceptToken.startsWith('.')) {\n      // tokens starting with a dot represent a file extension\n      return file.name.endsWith(acceptToken);\n    } else if (wildcards.includes(acceptToken)) {\n      return file.type.startsWith(acceptToken.substr(0, acceptToken.length - 1));\n    }\n\n    return file.type === acceptToken;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}